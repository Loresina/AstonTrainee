// –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(–ü–æ—Ä–µ—à–∞—Ç—å —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ - –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏):

// 0. –ó–∞–¥–∞—á–∞ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Ç–µ–ª–µ–≥—Ä–∞–º;
function main() {    
    new Promise((resolve) => {
        console.log('NEW');
        resolve();
    })
    .then(() => {
        console.log(1);
    });
    
    console.log(2);

    new Promise((resolve, reject) => {
        console.log(3); // –ø–æ—á–µ–º—É —ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –í–ù–ï –ø—Ä–æ–º–∏—Å–∞?
        setTimeout(() => {
            console.log(4);
        }, 0);
        resolve();
    })
    .then(() => {
        console.log(5);
    })

    console.log('LAST');
}

main();

// –í—ã–≤–æ–¥ 'NEW'23'LAST'154;

// 1.

let promiseTwo = new Promise((resolve, reject) => {
   resolve("a");
});

promiseTwo
.then((res) => {
   return res + "b";
})
.then((res) => {
   return res + "—Å";
})
.finally((res) => {
   return res + "!!!!!!!";
})
.catch((res) => {
   return res + "d";
})
.then((res) => {
   console.log(res);
});

// –í—ã–≤–æ–¥ abc;

// 2.
function doSmth() {
   return Promise.resolve("123");
}

doSmth()
.then(function (a) {
   console.log("1", a); //
   return a;
})
.then(function (b) {
   console.log("2", b);
   return Promise.reject("321");
})
.catch(function (err) {
   console.log("3", err);
})
.then(function (c) {
   console.log("4", c);
return c;
});

// –í—ã–≤–æ–¥
// 1 123
// 2 123
// 3 321
// 4 undefined

// 3. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 3 —Å–µ–∫—É–Ω–¥—ã.
// –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [10, 12, 15, 21];

const numbers = [10, 12, 15, 21];

for (let i = 0; i < numbers.length; i += 1) {
    setTimeout(() => console.log(i), 3000 * i);
}

numbers.forEach((num, ind) => {
    setTimeout(() => console.log(ind), 3000 * ind)
})


// 4. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ Top Level Await (–º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ async);
// Top Level Await (TLA) ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä await –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ async
// –≤ –º–æ–¥—É–ª–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è.
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ ECMAScript 2022 (ES12).

// await Promise.resolve(console.log('üéâ'));
// ‚Üí üéâ

// –î—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç Top Level Await —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –∂–¥–∞—Ç—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
// –¢–æ –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—â–∏–π –º–æ–¥—É–ª—å –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Å Top Level Await.
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑).
// –ú–æ–¥—É–ª—å —Å Top Level Await –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.


// –ë–û–ù–£–° –ó–ê–î–ê–ù–ò–ï 
/* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é fetchUrl, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.
–í–Ω—É—Ç—Ä–∏ fetchUrl –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—ã–π –º–µ—Ç–æ–¥ fetch, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
Promise —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç reject */

// fetchUrl('https://google/com&#39;)
// .then(...)
// .catch(...) // —Åatch –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
// –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ fetchUrl


const fetchUrl = (url, trying = 5) => {
   return Promise.resolve()
   .then(() => fetch(url))
   .catch((e) => {
      trying -= 1;
      return trying ? fetchUrl(url, trying) : console.log('Fetch failed after trying number 5 -', e.message);
   });
}

const fetchUrl1 = async (url, trying = 5) => {
   try {
      let n = 0;
      while (n<5) {
         const data = await fetch(url);
         n += 1;
      }
   }
   catch (e) {
      console.log('Fetch1 failed after trying number 5 -', e.message);
   }
}

fetchUrl('URL');
fetchUrl1('URL');




